{"version":3,"sources":["App.js","index.js"],"names":["App","walletAddress","setWalletAddress","useState","isConnected","setIsConnected","useEffect","checkConnection","async","window","ergoConnector","nautilus","connect","address","ergo","get_change_address","_jsxs","className","children","_jsx","onClick","disconnect","connected","error","console","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"sLAmEeA,MAjEf,WACE,MAAOC,EAAeC,GAAoBC,mBAAS,OAC5CC,EAAaC,GAAkBF,oBAAS,GAE/CG,qBAAU,KAERC,GAAiB,GAChB,IAEH,MAAMA,EAAkBC,UACtB,GAAoC,qBAAzBC,OAAOC,cAA+B,CAC/C,MAAMN,QAAoBK,OAAOC,cAAcC,SAASC,UAExD,GADAP,EAAeD,GACXA,EAAa,CACf,MAAMS,QAAgBJ,OAAOK,KAAKC,qBAClCb,EAAiBW,EACnB,CACF,GA4BF,OACEG,eAAA,OAAKC,UAAU,MAAKC,SAAA,CAClBC,cAAA,UAAQF,UAAU,aAAYC,SAC5BC,cAAA,MAAAD,SAAI,8BAENF,eAAA,QAAAE,SAAA,CACId,EAGAY,eAAA,OAAAE,SAAA,CACEF,eAAA,KAAAE,SAAA,CAAG,cAAYjB,KACfkB,cAAA,UAAQC,QAnBOZ,UACnBJ,UACIK,OAAOC,cAAcC,SAASU,aACpChB,GAAe,GACfH,EAAiB,MACnB,EAc0CgB,SAAC,yBAJrCC,cAAA,UAAQC,QAhCMZ,UACpB,GAAoC,qBAAzBC,OAAOC,cAChB,IACE,MAAMY,QAAkBb,OAAOC,cAAcC,SAASC,UAEtD,GADAP,EAAeiB,GACXA,EAAW,CACb,MAAMT,QAAgBJ,OAAOK,KAAKC,qBAClCb,EAAiBW,EACnB,CACF,CAAE,MAAOU,GACPC,QAAQD,MAAM,uCAAwCA,EACxD,MAEAC,QAAQD,MAAM,mCAChB,EAkBqCL,SAAC,4BAOlCC,cAAA,KAAAD,SAAG,gDAIX,EC7DAO,IAASC,OACPP,cAACQ,IAAMC,WAAU,CAAAV,SACfC,cAACnB,EAAG,MAEN6B,SAASC,eAAe,Q","file":"static/js/main.1845d36c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction App() {\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n\n  useEffect(() => {\n    // Check if wallet is already connected\n    checkConnection();\n  }, []);\n\n  const checkConnection = async () => {\n    if (typeof window.ergoConnector !== 'undefined') {\n      const isConnected = await window.ergoConnector.nautilus.connect();\n      setIsConnected(isConnected);\n      if (isConnected) {\n        const address = await window.ergo.get_change_address();\n        setWalletAddress(address);\n      }\n    }\n  };\n\n  const connectWallet = async () => {\n    if (typeof window.ergoConnector !== 'undefined') {\n      try {\n        const connected = await window.ergoConnector.nautilus.connect();\n        setIsConnected(connected);\n        if (connected) {\n          const address = await window.ergo.get_change_address();\n          setWalletAddress(address);\n        }\n      } catch (error) {\n        console.error(\"Error connecting to Nautilus wallet:\", error);\n      }\n    } else {\n      console.error(\"Nautilus wallet is not installed\");\n    }\n  };\n\n  const disconnectWallet = async () => {\n    if (isConnected) {\n      await window.ergoConnector.nautilus.disconnect();\n      setIsConnected(false);\n      setWalletAddress(null);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Welcome to Token Flight</h1>\n      </header>\n      <main>\n        {!isConnected ? (\n          <button onClick={connectWallet}>Connect Nautilus Wallet</button>\n        ) : (\n          <div>\n            <p>Connected: {walletAddress}</p>\n            <button onClick={disconnectWallet}>Disconnect Wallet</button>\n          </div>\n        )}\n        <p>Token distribution system coming soon!</p>\n      </main>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}