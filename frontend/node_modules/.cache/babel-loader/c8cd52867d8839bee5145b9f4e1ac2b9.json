{"ast":null,"code":"var _jsxFileName = \"/home/whaleshark/Documents/ergo/Token-Flight/frontend/src/components/LaunchButton.js\";\nimport React from 'react';\nimport { ergoConnector } from '@vechain/ergo-connector';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LaunchButton = () => {\n  const handleLaunch = async () => {\n    if (typeof ergoConnector !== 'undefined') {\n      try {\n        const connected = await ergoConnector.nautilus.connect();\n        if (connected) {\n          const unsignedTx = await fetchUnsignedTransaction();\n          const signedTx = await ergoConnector.nautilus.signTx(unsignedTx);\n          const txId = await submitTransaction(signedTx);\n          alert(`Token flight launched! Transaction ID: ${txId}`);\n        } else {\n          alert('Failed to connect to Nautilus wallet');\n        }\n      } catch (error) {\n        console.error('Error:', error);\n        alert('An error occurred. Check the console for details.');\n      }\n    } else {\n      alert('Nautilus wallet is not installed');\n    }\n  };\n  const fetchUnsignedTransaction = async () => {\n    // Fetch unsigned transaction from your backend\n    const response = await fetch('/api/unsignedTransaction');\n    return response.json();\n  };\n  const submitTransaction = async signedTx => {\n    // Submit signed transaction to your backend\n    const response = await fetch('/api/submitTransaction', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(signedTx)\n    });\n    return response.text();\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: handleLaunch,\n    className: \"launch-button\",\n    children: \"Launch Token Flight\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_c = LaunchButton;\nexport default LaunchButton;\nvar _c;\n$RefreshReg$(_c, \"LaunchButton\");","map":{"version":3,"names":["React","ergoConnector","jsxDEV","_jsxDEV","LaunchButton","handleLaunch","connected","nautilus","connect","unsignedTx","fetchUnsignedTransaction","signedTx","signTx","txId","submitTransaction","alert","error","console","response","fetch","json","method","headers","body","JSON","stringify","text","onClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/whaleshark/Documents/ergo/Token-Flight/frontend/src/components/LaunchButton.js"],"sourcesContent":["import React from 'react';\nimport { ergoConnector } from '@vechain/ergo-connector';\n\nconst LaunchButton = () => {\n  const handleLaunch = async () => {\n    if (typeof ergoConnector !== 'undefined') {\n      try {\n        const connected = await ergoConnector.nautilus.connect();\n        if (connected) {\n          const unsignedTx = await fetchUnsignedTransaction();\n          const signedTx = await ergoConnector.nautilus.signTx(unsignedTx);\n          const txId = await submitTransaction(signedTx);\n          alert(`Token flight launched! Transaction ID: ${txId}`);\n        } else {\n          alert('Failed to connect to Nautilus wallet');\n        }\n      } catch (error) {\n        console.error('Error:', error);\n        alert('An error occurred. Check the console for details.');\n      }\n    } else {\n      alert('Nautilus wallet is not installed');\n    }\n  };\n\n  const fetchUnsignedTransaction = async () => {\n    // Fetch unsigned transaction from your backend\n    const response = await fetch('/api/unsignedTransaction');\n    return response.json();\n  };\n\n  const submitTransaction = async (signedTx) => {\n    // Submit signed transaction to your backend\n    const response = await fetch('/api/submitTransaction', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(signedTx),\n    });\n    return response.text();\n  };\n\n  return (\n    <button onClick={handleLaunch} className=\"launch-button\">\n      Launch Token Flight\n    </button>\n  );\n};\n\nexport default LaunchButton;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExD,MAAMC,YAAY,GAAGA,CAAA,KAAM;EACzB,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI,OAAOJ,aAAa,KAAK,WAAW,EAAE;MACxC,IAAI;QACF,MAAMK,SAAS,GAAG,MAAML,aAAa,CAACM,QAAQ,CAACC,OAAO,CAAC,CAAC;QACxD,IAAIF,SAAS,EAAE;UACb,MAAMG,UAAU,GAAG,MAAMC,wBAAwB,CAAC,CAAC;UACnD,MAAMC,QAAQ,GAAG,MAAMV,aAAa,CAACM,QAAQ,CAACK,MAAM,CAACH,UAAU,CAAC;UAChE,MAAMI,IAAI,GAAG,MAAMC,iBAAiB,CAACH,QAAQ,CAAC;UAC9CI,KAAK,CAAC,0CAA0CF,IAAI,EAAE,CAAC;QACzD,CAAC,MAAM;UACLE,KAAK,CAAC,sCAAsC,CAAC;QAC/C;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;QAC9BD,KAAK,CAAC,mDAAmD,CAAC;MAC5D;IACF,CAAC,MAAM;MACLA,KAAK,CAAC,kCAAkC,CAAC;IAC3C;EACF,CAAC;EAED,MAAML,wBAAwB,GAAG,MAAAA,CAAA,KAAY;IAC3C;IACA,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAC,0BAA0B,CAAC;IACxD,OAAOD,QAAQ,CAACE,IAAI,CAAC,CAAC;EACxB,CAAC;EAED,MAAMN,iBAAiB,GAAG,MAAOH,QAAQ,IAAK;IAC5C;IACA,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAAC,wBAAwB,EAAE;MACrDE,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACd,QAAQ;IAC/B,CAAC,CAAC;IACF,OAAOO,QAAQ,CAACQ,IAAI,CAAC,CAAC;EACxB,CAAC;EAED,oBACEvB,OAAA;IAAQwB,OAAO,EAAEtB,YAAa;IAACuB,SAAS,EAAC,eAAe;IAAAC,QAAA,EAAC;EAEzD;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AAEb,CAAC;AAACC,EAAA,GA7CI9B,YAAY;AA+ClB,eAAeA,YAAY;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}